{
  "name": "vscode-jupyter-ai-feedback",
  "displayName": "Jupyter AI Feedback",
  "description": "Add AI Feedback buttons to .ipynb Python cells, using templates from GitHub repository. Features leveled feedback: ‚úÖ EXCELLENT, üö® TARGETED, ü§î TACTICAL, üèóÔ∏è STRATEGIC, üí° CONCEPTUAL. Supports hidden tests and multiple AI providers.",
  "version": "0.3.0",
  "publisher": "cellmate",
  "engines": {
    "vscode": "^1.60.0"
  },
  "activationEvents": [
    "onNotebook:*"
  ],
  "main": "./out/extension.js",
  "dependencies": {
    "axios": "^1.5.0",
    "simple-git": "^3.19.1",
    "tmp": "^0.2.3"
  },
  "devDependencies": {
    "@types/node": "^18.7.18",
    "@types/tmp": "^0.2.6",
    "@types/vscode": "^1.75.0",
    "@vscode/test-electron": "^2.3.0",
    "typescript": "^4.9.5"
  },
  "scripts": {
    "compile": "tsc -p ."
  },
  "contributes": {
    "configuration": {
      "properties": {
        "jupyterAiFeedback.apiUrl": {
          "type": "string",
          "description": "API URL for the LLM service (Open WebUI, Ollama, or OpenAI compatible)"
        },
        "jupyterAiFeedback.apiKey": {
          "type": "string",
          "description": "API key for the LLM service"
        },
        "jupyterAiFeedback.modelName": {
          "type": "string",
          "default": "llama4:scout",
          "description": "The model name used for AI feedback (e.g., llama3.3:latest, qwen, codellama, gpt-4)"
        },
        "jupyterAiFeedback.apiFormat": {
          "type": "string",
          "enum": ["openai", "ollama"],
          "default": "openai",
          "description": "API format to use: 'openai' for OpenAI/Open WebUI format, 'ollama' for Ollama streaming format"
        },
        "jupyterAiFeedback.includeProblemDescription": {
          "type": "boolean",
          "default": true,
          "description": "Include problem description from previous markdown cells in the AI context"
        },
        "jupyterAiFeedback.includeCodeOutput": {
          "type": "boolean", 
          "default": true,
          "description": "Include code cell output (results, errors) in the AI context for better analysis"
        },
        "jupyterAiFeedback.autoExecuteCode": {
          "type": "boolean",
          "default": true, 
          "description": "Automatically execute the code cell before generating feedback to get fresh output"
        },
        "jupyterAiFeedback.useHiddenTests": {
          "type": "boolean",
          "default": false,
          "description": "Enable hidden tests feature - automatically run unit tests and include results in AI context (requires EXERCISE_ID in code)"
        }
      }
    },
    "commands": [
      {
        "command": "jupyterAiFeedback.sendNotebookCell",
        "title": "Send Notebook Cell for AI Feedback"
      },
      {
        "command": "jupyterAiFeedback.listTemplates",
        "title": "List Available Templates"
      },
      {
        "command": "jupyterAiFeedback.selectTemplate",
        "title": "Select AI Feedback Template",
        "icon": "$(selection)"
      },
      {
        "command": "jupyterAiFeedback.quickSwitch",
        "title": "Quick Switch Template",
        "icon": "$(arrow-swap)"
      },
      {
        "command": "jupyterAiFeedback.refreshTemplates", 
        "title": "Refresh Templates from Repository",
        "icon": "$(refresh)"
      },
      {
        "command": "jupyterAiFeedback.listExercises",
        "title": "List Available Exercises (for Hidden Tests)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "jupyterAiFeedback.sendNotebookCell",
          "when": "notebookType == 'jupyter-notebook'"
        },
        {
          "command": "jupyterAiFeedback.listTemplates"
        },
        {
          "command": "jupyterAiFeedback.selectTemplate"
        },
        {
          "command": "jupyterAiFeedback.quickSwitch"
        },
        {
          "command": "jupyterAiFeedback.refreshTemplates"
        },
        {
          "command": "jupyterAiFeedback.listExercises"
        }
      ]
    }
  }
}